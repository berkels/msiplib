# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import sys
sys.path.insert(0, os.path.abspath('..'))
sys.path.append(os.path.abspath('_ext'))


# -- Project information -----------------------------------------------------

project = 'msiplib'
copyright = '2020, Benjamin Berkels'
author = 'Benjamin Berkels'

# The short X.Y version
version = '1.0'
# The full version, including alpha/beta/rc tags
release = '1.0'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.inheritance_diagram',
    'autoapi.sphinx',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinx.ext.autosummary',
    'sphinx.ext.napoleon',
    'sphinx.ext.ifconfig',
    'sphinx.ext.imgmath',
    'sphinx.ext.coverage',
    'function_index',
    'class_index',
    'sphinxcontrib.bibtex'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
add_module_names = False

# Show authors with the ".. codeauthor::" directive
show_authors = True

# Order functions by their order in the source code files
autodoc_member_order = 'bysource'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'classic'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
#html_sidebars = {'**': ['localtoc.html', 'sourcelink.html', 'searchbox.html'],}

html_logo = '_static/logo.png'
html_favicon = '_static/favicon.ico'

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'msiplibdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'msiplib.tex', 'msiplib Documentation',
     'Benjamin Berkels', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'msiplib', 'msiplib Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'msiplib', 'msiplib Documentation',
     author, 'msiplib', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for imgmath extension -------------------------------------------

# Output format (either 'png' or 'svg')
imgmath_image_format = 'svg'

# Optimize vertical alignment of rendered math (requires the latex preview package)
imgmath_use_preview = True

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todolist` produce output, else they produce nothing.
todo_include_todos = True

# If true, `todolist` produces output without file paths and line numbers
todo_link_only = True

# -- Options for autoapi extension -------------------------------------------

autoapi_modules = {
   'msiplib': {
      'prune': False,
      'override': True
   }
}

# -- Options for sphinxcontrib.bibtex extension -------------------------------

bibtex_bibfiles = ['refs.bib']

# -- Extension of the autosummary extension -----------------------------------
from sphinx.ext.autosummary import Autosummary
from docutils.parsers.rst import directives
import importlib
import inspect

class ExtAutoSummary(Autosummary):

    option_spec = {
        'classes': directives.unchanged,
        'functions': directives.unchanged
    }

    required_arguments = 1

    def run(self):
        try:
            if 'classes' in self.options:
                m = importlib.import_module(self.arguments[0])

                classes = inspect.getmembers(m, inspect.isclass)
                classes = [c for c in classes if inspect.getmodule(c[1]) == m]
                classes = sorted(classes, key=lambda c: inspect.findsource(c[1])[1])

                # ~ members = [None] * len(classes)

                # ~ for i, c in enumerate(classes):
                    # ~ methods = [f for f in dir(c[1]) if callable(getattr(c[1], f)) and not f.startswith("_")]
                    # ~ attributes = [a for a in dir(c[1]) if not callable(getattr(c[1], a)) and not a.startswith("_")]

                    # ~ methods = sorted(methods, key=lambda f: getattr(c[1], f).__code__.co_firstlineno)

                    # ~ members[i] = methods
                    # ~ members[i].extend(attributes)

                self.content = []
                for i in range(len(classes)):
                    self.content.append("~%s.%s" % (self.arguments[0], classes[i][0]))
                    # ~ self.content.extend(["~%s.%s.%s" % (self.arguments[0], classes[i][0], members[i][j]) for j in range(len(members[i]))])
            elif 'functions' in self.options:
                m = importlib.import_module(self.arguments[0])

                funcs = inspect.getmembers(m)
                funcs = [f for f in funcs if inspect.getmodule(f[1]) == m and callable(f[1]) and not inspect.isclass(f[1])]
                funcs = sorted(funcs, key=lambda f: f[1].__code__.co_firstlineno)

                self.content = ["~%s.%s" % (self.arguments[0], f[0]) for f in funcs if not f[0].startswith('_')]
        finally:
            return super(ExtAutoSummary, self).run()

def has_classes(module):
    m = importlib.import_module(module)

    classes = inspect.getmembers(m, inspect.isclass)
    classes = [c for c in classes if inspect.getmodule(c[1]) == m]

    return len(classes) > 0

def has_functions(module):
    m = importlib.import_module(module)

    funcs = inspect.getmembers(m)
    funcs = [f for f in funcs if inspect.getmodule(f[1]) == m and callable(f[1]) and not inspect.isclass(f[1])]

    return len(funcs) > 0

# -----------------------------------------------------------------------------
import pkgutil
import msiplib

def setup(app):
    # New extautosummary directive
    app.add_directive('extautosummary', ExtAutoSummary)

    # Custom style sheets
    app.add_css_file('function_separator.css')
    app.add_css_file('code_ref.css')
    app.add_css_file('code.css')

    # Add boolean config values to test if a module contains classes or functions
    app.add_config_value('has_classes_msiplib', has_classes("msiplib"), 'html')
    app.add_config_value('has_functions_msiplib', has_functions("msiplib"), 'html')

    for importer, modname, ispkg in pkgutil.walk_packages(path=msiplib.__path__,
                                                          prefix=msiplib.__name__+'.',
                                                          onerror=lambda x: None):
        app.add_config_value('has_classes_' + modname.replace(".", "_"), has_classes(modname), 'html')
        app.add_config_value('has_functions_' + modname.replace(".", "_"), has_functions(modname), 'html')
